generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  profileImage String?
  apiKeys      ApiKey[]
  subscription Subscription?
  videos       Video[]
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  plan                 String
  status               String
  startDate            DateTime  @default(now())
  endDate              DateTime?
  minutesAllowed       Int
  minutesUsed          Int       @default(0)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Video {
  id                String      @id @default(cuid())
  userId            String
  title             String
  description       String?
  originalUrl       String
  duration          Int
  fileSize          Int
  uploadedAt        DateTime    @default(now())
  status            String
  processedAt       DateTime?
  aiAnalysisId      String?
  transcriptionText String?
  transcriptionPath String?
  uploadPath        String
  error             String?
  clips             Clip[]
  aiAnalysis        AIAnalysis? @relation(fields: [aiAnalysisId], references: [id])
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags              VideoTag[]
}

model Clip {
  id              String         @id @default(cuid())
  videoId         String
  title           String?
  description     String?
  url             String
  thumbnailUrl    String?
  startTime       Int
  endTime         Int
  quality         String?
  format          String?
  engagement      Float?
  createdAt       DateTime       @default(now())
  filePath        String
  resizedUrl      String?
  resizedPath     String?
  subtitlesUrl    String?
  subtitlesPath   String?
  processingJobId String?
  processingJob   ProcessingJob? @relation(fields: [processingJobId], references: [id])
  video           Video          @relation(fields: [videoId], references: [id], onDelete: Cascade)
  tags            ClipTag[]
}

model AIAnalysis {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  model       String
  rawAnalysis Json?
  highlights  Json?
  transcript  String?
  metadata    Json?
  wordTimings Json?
  videos      Video[]
}

model VideoTag {
  id        String   @id @default(cuid())
  name      String
  videoId   String
  createdAt DateTime @default(now())
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, name])
}

model ClipTag {
  id        String   @id @default(cuid())
  name      String
  clipId    String
  createdAt DateTime @default(now())
  clip      Clip     @relation(fields: [clipId], references: [id], onDelete: Cascade)

  @@unique([clipId, name])
}

model ApiKey {
  id        String    @id @default(cuid())
  userId    String
  name      String
  key       String    @unique
  createdAt DateTime  @default(now())
  lastUsed  DateTime?
  expiresAt DateTime?
  isActive  Boolean   @default(true)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProcessingJob {
  id         String    @id @default(cuid())
  status     String
  priority   Int       @default(0)
  createdAt  DateTime  @default(now())
  startedAt  DateTime?
  finishedAt DateTime?
  error      String?
  progress   Float?
  parameters Json?
  type       String
  logs       String?
  outputPath String?
  clips      Clip[]
}
